#!/usr/bin/env ruby
# frozen_string_literal: true

$:.unshift(File.expand_path("../", __dir__))

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)

require 'bundler/setup'
require "dry/cli"
require "active_support/core_ext/class/attribute"
require "yaml"
require "tty-command"
require "fileutils"
require "active_support/core_ext/string"
require "pathname"
require "rubygems"
require "zeitwerk"
require "awesome_print"
require_relative "support"

loader = Zeitwerk::Loader.new
loader.push_dir("#{__dir__}/../lib")
loader.setup

module Avo
  VERSION = "0.0.1"

  module CLI
    module Commands
      extend Dry::CLI::Registry

      class BaseCommand < Dry::CLI::Command
        def run(command)
          result = cmd.run(command)
          halt if result.failed?
          result
        rescue TTY::Command::ExitError => e
          halt
        end

        def halt(message: nil)
          message ||= "#{self.class} failed."
          yell message
          exit
        end
      end

      class Version < BaseCommand
        desc "Print version"

        def call(*)
          puts VERSION
        end
      end

      class Lint < BaseCommand
        desc "Lint gem"

        option :path, aliases: ["-p"], required: false, desc: "Path of your Rails app"

        def call(**)
          scan = ::AvoLinter::Scanner.scan

          # ap scan

          say "Scan finished!\n"

          if scan.errors?
            yell "We found a couple of errors."
            ap scan.error_messages
          else
            say "No errors found. Good job!"
          end

        end
      end

      register "version", Version, aliases: ["v", "-v", "--version"]

      register "lint", Lint
    end
  end
end

Dry::CLI.new(Avo::CLI::Commands).call
